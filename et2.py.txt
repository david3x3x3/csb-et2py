from js import self, console, Object
from pyodide.ffi import to_js
import random
import sys

pieces0 = ['aaaa'] + (
  'bdaa/beaa/cdaa/dcaa/gbab/hcab/jbab/jfab/mdab/oeab/pcab/teab/tfab/veab/hbac/idac/' +
  'kfac/nfac/ocac/pcac/qeac/rbac/rfac/sbac/vbac/gcad/gdad/hdad/idad/ofad/pcad/sdad/' +
  'tcad/tead/ufad/wead/ibae/lfae/mfae/ncae/ndae/pbae/pcae/pdae/qbae/seae/teae/ueae/' +
  'gfaf/hbaf/hcaf/jbaf/oeaf/qeaf/qfaf/tdaf/ubaf/ufaf/vcaf/wdaf/jigg/kogg/hlgh/gtgi/' +
  'iwgi/kkgi/mhgi/sjgi/wtgi/logl/orgl/kigm/pqgm/spgm/tlgm/kpgn/npgn/lugo/slgo/uvgo/' +
  'nigp/iigq/mqgq/ingr/jkgr/trgr/usgr/gvgs/jwgs/qugs/mrgt/npgt/nqgt/qvgt/rkgt/vlgv/' +
  'qngw/stgw/vjgw/wvgw/rphh/ruhh/unhh/wjhh/qphi/lthj/nthj/qphj/umhj/prhk/rphk/snhl/' +
  'suhl/kqhm/orhm/rmhm/wuhm/lvhn/urho/twhp/kwhq/juhs/knhs/sphs/rwht/vpht/kjhu/nvhu/' +
  'qlhu/sthu/jshv/rkhv/kuhw/mqhw/qlhw/ushw/soii/jlij/jmij/jrij/nvij/pjij/urij/vvij/' +
  'lqik/iril/iwil/lkil/pril/jmin/qwin/mmio/mnio/wuio/ooiq/oriq/woiq/ouis/tjis/vvit/' +
  'jsiu/ksiu/pmiw/quiw/lqjk/qtjk/lljm/mpjn/nvjn/qtjo/sujo/vmjo/ppjp/rsjp/ovjq/onjr/' +
  'kqjs/rujt/tpjt/ouju/mujv/omjv/ntkk/wokl/nrkm/ttkm/vokn/kvko/lnko/unko/llkp/pskp/' +
  'mokq/vmkr/vwkr/wpkr/mwks/ntks/ssks/nlkt/vtku/woku/rnkv/rtkv/ulkv/wvkv/woll/nwlm/' +
  'tplm/mnlo/uplo/lulp/ttlq/lslr/qwlr/wvlr/npls/qrlu/mqlv/mulw/vvlw/vwlw/rwmm/somm/' +
  'upmm/npmo/rrmo/ntmq/owms/utms/rsmt/rvmt/nsnn/uqno/oqnq/osnq/rpnq/qunr/pwns/vpns/' +
  'ovnt/qvnt/prop/stop/wsoq/uwov/vwpp/rqpq/qvpr/uvps/wtqq/trqr/usrt/vusu/uwsw/vwtw').split('/')

width, height = 16, 16
pieces = dict()
for i, p in enumerate(pieces0):
    p2 = []
    for rot in range(4):
        pieces[(i, rot)] = p
        p = p[3] + p[:3]
fit = dict()
for key1, val in pieces.items():
    key2 = (val[0], val[3], val[1] == 'a', val[2] == 'a')
    if not fit.get(key2):
        fit[key2] = [key1]
    else:
        fit[key2].insert(0, key1)
for k in fit:
    random.shuffle(fit[k])
Q = [([(0, 0)]*width, set(range(1,257)))]
solcount = 0
nodes = 0
best = 0
while Q:
    solution, remain = Q.pop()
    nodes += 1
    if nodes % 100000 == 0:
        self.postMessage(to_js({'progress': nodes}))
    if len(solution) > best:
        # print('\n', len(solution)-16, ' '.join([f'{p[0]}/{p[1]}' for p in solution[width:]]))
        url = ''.join([pieces[p] for p in solution[width:]])
        for r in remain:
            url += pieces[(r, 0)]
        url = 'https://e2.bucas.name/#puzzle=EternityII&board_w=16&board_h=16&board_edges=' + url
        best = len(solution)
        p2 = [f'{p[0]}/{p[1]}' for p in solution[width:]]
        self.postMessage(to_js({'pieces': p2, 'url': url}, dict_converter=Object.fromEntries))
    if not remain:
        print(solution[width:])
        solcount += 1
    else:
        for p in fit.get((pieces[solution[-width]][2],
                          pieces[solution[-1]][1],
                          len(solution) % width == width - 1,
                          len(solution) // width == height),[]):
            (piecenum, rot) = p
            if len(solution[width:]) == 119:
                if pieces[(piecenum, rot)][2] != pieces[(139, 2)][0]:
                    continue
            if len(solution[width:]) < 135:
                if piecenum == 139:
                    continue
            if len(solution[width:]) == 135:
                if piecenum != 139 or rot != 2:
                    continue
            if piecenum in remain:
                Q += [(solution + [p], remain - set([piecenum]))]
print(str(solcount) + ' solutions')
print(str(nodes) + ' nodes')
